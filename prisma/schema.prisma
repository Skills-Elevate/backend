// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Set the provider postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  review    Review[]
  messages          Message[]
  ChannelMembership ChannelMembership[]
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String?
  published  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
}

model Review {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String
  author      String
  createdAt   DateTime @default(now())
}

model Channel {
  id                String              @id @default(uuid())
  name              String
  messages          Message[]
  createdAt         DateTime            @default(now())
  ChannelMembership ChannelMembership[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorName], references: [id])
  authorName String
  channel    Channel  @relation(fields: [channelId], references: [id])
  channelId  String
}

model ChannelMembership {
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  channel           Channel @relation(fields: [channelId], references: [id])
  channelId         String
  hasAcceptedAccess Boolean @default(false)

  @@id([userId, channelId])
}
